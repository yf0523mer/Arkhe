<div class="post-box">
<div class="container">
    <div class="new-post-box">
        <% if flash[:error] %>
          <p id="error"><%= flash[:error] %></p>
        <% end %>
        <h2>Post Edit</h2>
        <h2>Gmap</h2>
    </div>

  <div id="map"></div>

<div class="new-post-box clip-box-a">
    <table class="post-table">
        <p style="font-family: 'Comic Sans MS',sans-serif; font-size: 20px;">Routes</p>
            <% @post.places.order(order:"ASC").each do |p| %>
                <tr>
                  <th><%= p.address %></th>
                  <% if current_user == @user || current_user.admin == 'true' %>
                    <th><%= link_to "place delete", place_path(p.id), method: :delete, class:"destroy_p_#{p.id} place-remove-btn", "data-confirm" => "場所を削除します。よろしいですか？" %></th>
                    <% else %>
                <% end %>
            </tr>
        <% end %>
    </table>
</div>

<div class="new-post-box clip-box-a">
    <table class="post-table">
        <p style="font-family: 'Comic Sans MS',sans-serif; font-size: 20px;">Images</p>
            <% @post.images.each do |image| %>
                <tr>
                  <th><%= attachment_image_tag image, :image, :fill, 200, 200 %></th>
                  <% if current_user == @user || current_user.admin == 'true' %>
                    <th><%= link_to "image delete", image_path(image.id), method: :delete, class:"destroy_image_#{image.id} place-remove-btn", "data-confirm" => "画像を削除します。よろしいですか？" %></th>
                    <% else %>
                <% end %>
            </tr>
        <% end %>
    </table>
</div>

    <div style="width: 80%; margin: auto;">
        <div id="preview_result">Image preview</div>
    </div>

<div class="new-post-box clip-box-a">
    <%= form_for @post, url: post_path do |f| %>
        <h3>Where You went</h3>
              <div id='places'>
                <%= f.fields_for :places do |place| %>
                <%= render 'place_fields', :f => place %>
                <% end %>
                <div class='links'>
                    <%= link_to_add_association 'add place', f, :places, class:"post-add-btn" %>
                </div>
              </div>

            <b>Title</b><br>
              <%= f.text_field :title, autofocus: true, id:"inputLastname", placeholder:"Title" %><br>
            <b>Text</b><br>
              <%= f.text_area :text, autofocus: true, id:"inputLastnamekana", placeholder:"Text", :size=>"50x5" %>
            <h3>Image Post</h3>
                <%= f.attachment_field :images_images, multiple: true, class:"image", type:"file", id:"input_file", onchange:"preview_file(this.id);"%>
                <div class="post-btn-zone">
                    <%= f.submit 'Post Edit', class: 'post-btn' %>
                </div>
          <% end %>
        </div>
    </div>
</div>


<script>
// プレビュー関数(引数 ⇒ inputタグのid)
function preview_file(id){

    // 対象要素を取得
    var target_element = document.getElementById(id);

    // 結果コードを格納する変数
    var result_code = '';

    // アップした画像の数だけ処理
    for (var i = 0; i < document.getElementById(id).files.length; i++){

        // 画像のURLを取得
        var img_url = window.URL.createObjectURL(document.getElementById(id).files[i]);

        // コードを更新
        result_code += '<img src="' + img_url + '" alt="プレビュー">';

    }

    // プレビューを出力
    document.getElementById('preview_result').innerHTML = result_code;

}
</script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>

　let mapInstance
  function initMap() {
    var bounds = new google.maps.LatLngBounds();
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 11,
      center: { lat: gon.location[0], lng: gon.location[1] },
      styles: [
        {
            "featureType": "administrative",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#6195a0"
                }
            ]
        },
        {
            "featureType": "administrative.province",
            "elementType": "geometry.stroke",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "landscape",
            "elementType": "geometry",
            "stylers": [
                {
                    "lightness": "0"
                },
                {
                    "saturation": "0"
                },
                {
                    "color": "#f5f5f2"
                },
                {
                    "gamma": "1"
                }
            ]
        },
        {
            "featureType": "landscape.man_made",
            "elementType": "all",
            "stylers": [
                {
                    "lightness": "-3"
                },
                {
                    "gamma": "1.00"
                }
            ]
        },
        {
            "featureType": "landscape.natural.terrain",
            "elementType": "all",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "poi",
            "elementType": "all",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "poi.park",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#bae5ce"
                },
                {
                    "visibility": "on"
                }
            ]
        },
        {
            "featureType": "road",
            "elementType": "all",
            "stylers": [
                {
                    "saturation": -100
                },
                {
                    "lightness": 45
                },
                {
                    "visibility": "simplified"
                }
            ]
        },
        {
            "featureType": "road.highway",
            "elementType": "all",
            "stylers": [
                {
                    "visibility": "simplified"
                }
            ]
        },
        {
            "featureType": "road.highway",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#fac9a9"
                },
                {
                    "visibility": "simplified"
                }
            ]
        },
        {
            "featureType": "road.highway",
            "elementType": "labels.text",
            "stylers": [
                {
                    "color": "#4e4e4e"
                }
            ]
        },
        {
            "featureType": "road.arterial",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#787878"
                }
            ]
        },
        {
            "featureType": "road.arterial",
            "elementType": "labels.icon",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "featureType": "transit",
            "elementType": "all",
            "stylers": [
                {
                    "visibility": "simplified"
                }
            ]
        },
        {
            "featureType": "transit.station.airport",
            "elementType": "labels.icon",
            "stylers": [
                {
                    "hue": "#0a00ff"
                },
                {
                    "saturation": "-77"
                },
                {
                    "gamma": "0.57"
                },
                {
                    "lightness": "0"
                }
            ]
        },
        {
            "featureType": "transit.station.rail",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#43321e"
                }
            ]
        },
        {
            "featureType": "transit.station.rail",
            "elementType": "labels.icon",
            "stylers": [
                {
                    "hue": "#ff6c00"
                },
                {
                    "lightness": "4"
                },
                {
                    "gamma": "0.75"
                },
                {
                    "saturation": "-68"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "all",
            "stylers": [
                {
                    "color": "#eaf6f8"
                },
                {
                    "visibility": "on"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#c7eced"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "lightness": "-49"
                },
                {
                    "saturation": "-53"
                },
                {
                    "gamma": "0.79"
                }
            ]
        }
    ]


    });
    for(var i = 0; i < gon.locations.length; i++){
      marker = new google.maps.Marker({
        position: { lat: gon.locations[i][0], lng: gon.locations[i][1] },
        // title: gon.locations[i].name,
      });
    }
    //ルート表示
        var rendererOptions = {
            suppressMarkers : false,
            map: map,
        }
        var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        var directionsService = new google.maps.DirectionsService();
        var points ={};
        var origin; // 開始地点
        var destination; // 終了地点
        var waypoints = []; // 経由地点

            //origin, destination, waypointsを設定する
            for (var i = 0; i < gon.locations.length; i++) {
                points = {lat : gon.locations[i][0], lng : gon.locations[i][1]};
                // points[i] = new google.maps.LatLng(gon.locations[i][0],gon.locations[i][1]);
                if (i == 0){
                    origin = points;
                } else if (i == gon.locations.length-1){
                    destination = points;
                } else {
                    var waylocations = new google.maps.LatLng(points.lat, points.lng);
                    waypoints.push( {location: waylocations, stopover: true} );
                }
            }

            // リクエスト作成
            var request = {
                origin:      origin,
                destination: destination,
                waypoints: waypoints,
                travelMode:  google.maps.TravelMode.WALKING,
                optimizeWaypoints: false
            };

            // ルートサービスのリクエスト
            directionsService.route(request, function(response, status) {

                if (status == google.maps.DirectionsStatus.OK) {
                    // 結果を表示する
                    directionsDisplay.setDirections(response);
                }
                var data = response.routes[0].legs;
                var dis = 0;
                var sec = 0;
                for (var i = 0; i < data.length; i++) {
                    sec += data[i].duration.value;
                    dis += data[i].distance.value;
                }
                var d = document.createElement("span");
                d.setAttribute("id", "distance");
                var dresult = Math.round(dis*100/1000) / 100;
                d.innerHTML     = dresult + "km";
                document.getElementById("distance").appendChild(d);

                var t = document.createElement("span");
                t.setAttribute("id", "time");
                var sresult = Math.round(sec*100/3600) / 100;
                t.innerHTML     = sresult  + "時間";
                document.getElementById("time").appendChild(t);
            });

      bounds.extend (marker.position);
      map.fitBounds (bounds);
    //ルート表示
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=ENV[GMAP]&callback=initMap" async defer></script>
