<div class="container">
  <input name="places_json" type="hidden" class='places_json' value=<%= @places_json %> />

  <div class="post-detail">
    <span><%= link_to user_path(@post.user_id) do %>
      <%= attachment_image_tag @post.user, :image, :fill, 60, 60, fallback: "No_image.png",size: '60x60', class:"user-image", style:"text-decoration:none;" %>
      <% end %>
    </span>
      <%= @post.title %>
      <%= @post.text %>
      <%= @post.distance %>
      <% @post.images.each do |image| %>
        <%= attachment_image_tag image, :image, :fill, 200, 200, class:"", size: '200x200' %>
      <% end %><br>
      <% @post.places.each do |p| %>
        <%= p.address %>
        <% if current_user == @user || current_user.admin == 'true' %>
          <%= link_to "place delete", place_path(p.id), method: :delete, class:"destroy_p_#{p.id} btn-sm btn-danger", "data-confirm" => "場所を削除します。よろしいですか？" %><br>
          <% else %>
          <% end %>
  <% end %>
  </div>
  <div class="">
    <p>総距離</p>
    <p id="distance"></p>
  </div>
  <div class="">
    <p>移動時間(推定)</p>
    <p id="time"></p>
  </div>

  <h3>Walking Routes</h3>
    <div id="map"></div>

  <div class="favorite-zone">
    <% if @post.user_id != current_user.id %>
      <% if @post.favorited_by?(current_user) %>
        <li>
          <%= link_to post_favorites_path(@post), method: :delete do %>
            <i class="favorite-btn" aria-hidden="true">
              <%= @post.favorites.count%> Like
            </i>
          <% end %>
        </li>
      <% else %>
        <li>
          <%= link_to post_favorites_path(@post), method: :post do %>
            <i class="favorite-btn" aria-hidden="true">
              <%= @post.favorites.count %> Like
            </i>
          <% end %>
        </li>
      <% end %>
    <% else %>
      <li>
        <i class="favorite-number" aria-hidden="true">
              <%= @post.favorites.count %> Like
        </i>
      <% end %>
    </li>
  </div>

  <div>
  <% @post.comments.each do |comment| %>
      <span><%= comment.user.nickname %></span>
      <span><%= comment.comment %></span>
      <span class="comment-date"><%= comment.created_at.strftime('%Y/%m/%d') %></span>
  <% end %>
  </div>
  <div>
  <%= form_for [@post, @comment] do |f| %>
      <div class="row">
          <div class="col-sm-12">
              <%= f.text_area :comment, rows:'5', class: "form-control",placeholder: "コメントをここに" %>
          </div>
      </div>
          <%= f.submit "送信する", class: "btn btn-lg btn-base-1 mt-20 pull-right" %>
  <% end %>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  function initMap() {
    var bounds = new google.maps.LatLngBounds();
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 11,
      center: { lat: gon.location[0], lng: gon.location[1] },
      styles: [
      {
          "featureType": "administrative",
          "elementType": "all",
          "stylers": [
              {
                  "saturation": "84"
              }
          ]
      },
      {
          "featureType": "administrative",
          "elementType": "labels.text.fill",
          "stylers": [
              {
                  "color": "#6d6756"
              },
              {
                  "saturation": "0"
              }
          ]
      },
      {
          "featureType": "administrative.country",
          "elementType": "geometry.fill",
          "stylers": [
              {
                  "hue": "#ff0000"
              },
              {
                  "visibility": "off"
              }
          ]
      },
      {
          "featureType": "administrative.province",
          "elementType": "geometry.fill",
          "stylers": [
              {
                  "visibility": "off"
              },
              {
                  "hue": "#008aff"
              }
          ]
      },
      {
          "featureType": "landscape",
          "elementType": "all",
          "stylers": [
              {
                  "color": "#f4f2e5"
              },
              {
                  "gamma": "1"
              },
              {
                  "lightness": "0"
              },
              {
                  "saturation": "0"
              },
              {
                  "weight": "1"
              }
          ]
      },
      {
          "featureType": "poi",
          "elementType": "all",
          "stylers": [
              {
                  "visibility": "off"
              }
          ]
      },
      {
          "featureType": "road",
          "elementType": "all",
          "stylers": [
              {
                  "saturation": "-70"
              },
              {
                  "lightness": "31"
              },
              {
                  "gamma": "1.00"
              }
          ]
      },
      {
          "featureType": "road",
          "elementType": "labels.text.fill",
          "stylers": [
              {
                  "color": "#b0a586"
              }
          ]
      },
      {
          "featureType": "road.highway",
          "elementType": "all",
          "stylers": [
              {
                  "visibility": "simplified"
              }
          ]
      },
      {
          "featureType": "road.arterial",
          "elementType": "labels.icon",
          "stylers": [
              {
                  "visibility": "off"
              }
          ]
      },
      {
          "featureType": "transit",
          "elementType": "all",
          "stylers": [
              {
                  "visibility": "off"
              }
          ]
      },
      {
          "featureType": "water",
          "elementType": "all",
          "stylers": [
              {
                  "color": "#bed4d4"
              },
              {
                  "visibility": "on"
              }
          ]
      }
  ]

    });
    for(var i = 0; i < gon.locations.length; i++){
      marker = new google.maps.Marker({
        position: { lat: gon.locations[i][0], lng: gon.locations[i][1] },
        // title: gon.locations[i].name,
      });
    }
    //ルート表示
        var rendererOptions = {
            suppressMarkers : false,
            map: map,
        }
        var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        var directionsService = new google.maps.DirectionsService();
        var points ={};
        var origin; // 開始地点
        var destination; // 終了地点
        var waypoints = []; // 経由地点

            //origin, destination, waypointsを設定する
            for (var i = 0; i < gon.locations.length; i++) {
                points = {lat : gon.locations[i][0], lng : gon.locations[i][1]};
                // points[i] = new google.maps.LatLng(gon.locations[i][0],gon.locations[i][1]);
                if (i == 0){
                    origin = points;
                } else if (i == gon.locations.length-1){
                    destination = points;
                } else {
                    var waylocations = new google.maps.LatLng(points.lat, points.lng);
                    waypoints.push( {location: waylocations, stopover: true} );
                }
            }

            // リクエスト作成
            var request = {
                origin:      origin,
                destination: destination,
                waypoints: waypoints,
                travelMode:  google.maps.TravelMode.WALKING,
                optimizeWaypoints: false
            };

            // ルートサービスのリクエスト
            directionsService.route(request, function(response, status) {

                if (status == google.maps.DirectionsStatus.OK) {
                    // 結果を表示する
                    directionsDisplay.setDirections(response);
                }
                var data = response.routes[0].legs;
                var dis = 0;
                var sec = 0;
                for (var i = 0; i < data.length; i++) {
                    sec += data[i].duration.value;
                    dis += data[i].distance.value;
                }
                var d = document.createElement("span");
                d.setAttribute("id", "distance");
                var dresult = Math.round(dis*100/1000) / 100;
                d.innerHTML     = dresult + "km";
                document.getElementById("distance").appendChild(d);

                var t = document.createElement("span");
                t.setAttribute("id", "time");
                var sresult = Math.round(sec*100/3600) / 100;
                t.innerHTML     = sresult  + "時間";
                document.getElementById("time").appendChild(t);
            });

      bounds.extend (marker.position);
      map.fitBounds (bounds);
    //ルート表示
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=&callback=initMap" async defer
        type="text/javascript"></script>
